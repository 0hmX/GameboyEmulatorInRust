use super::Cpu;

// --- CB Prefix Implementations ---
impl Cpu {
    // RLC r / RLC (HL)
    cb_reg_op!(cb_rlc_b, rlc, b);
    cb_reg_op!(cb_rlc_c, rlc, c);
    cb_reg_op!(cb_rlc_d, rlc, d);
    cb_reg_op!(cb_rlc_e, rlc, e);
    cb_reg_op!(cb_rlc_h, rlc, h);
    cb_reg_op!(cb_rlc_l, rlc, l);
    cb_hlp_op!(cb_rlc_hlp, rlc);
    cb_reg_op!(cb_rlc_a, rlc, a);
    // RRC r / RRC (HL)
    cb_reg_op!(cb_rrc_b, rrc, b);
    cb_reg_op!(cb_rrc_c, rrc, c);
    cb_reg_op!(cb_rrc_d, rrc, d);
    cb_reg_op!(cb_rrc_e, rrc, e);
    cb_reg_op!(cb_rrc_h, rrc, h);
    cb_reg_op!(cb_rrc_l, rrc, l);
    cb_hlp_op!(cb_rrc_hlp, rrc);
    cb_reg_op!(cb_rrc_a, rrc, a);
    // RL r / RL (HL)
    cb_reg_op!(cb_rl_b, rl, b);
    cb_reg_op!(cb_rl_c, rl, c);
    cb_reg_op!(cb_rl_d, rl, d);
    cb_reg_op!(cb_rl_e, rl, e);
    cb_reg_op!(cb_rl_h, rl, h);
    cb_reg_op!(cb_rl_l, rl, l);
    cb_hlp_op!(cb_rl_hlp, rl);
    cb_reg_op!(cb_rl_a, rl, a);
    // RR r / RR (HL)
    cb_reg_op!(cb_rr_b, rr, b);
    cb_reg_op!(cb_rr_c, rr, c);
    cb_reg_op!(cb_rr_d, rr, d);
    cb_reg_op!(cb_rr_e, rr, e);
    cb_reg_op!(cb_rr_h, rr, h);
    cb_reg_op!(cb_rr_l, rr, l);
    cb_hlp_op!(cb_rr_hlp, rr);
    cb_reg_op!(cb_rr_a, rr, a);
    // SLA r / SLA (HL)
    cb_reg_op!(cb_sla_b, sla, b);
    cb_reg_op!(cb_sla_c, sla, c);
    cb_reg_op!(cb_sla_d, sla, d);
    cb_reg_op!(cb_sla_e, sla, e);
    cb_reg_op!(cb_sla_h, sla, h);
    cb_reg_op!(cb_sla_l, sla, l);
    cb_hlp_op!(cb_sla_hlp, sla);
    cb_reg_op!(cb_sla_a, sla, a);
    // SRA r / SRA (HL)
    cb_reg_op!(cb_sra_b, sra, b);
    cb_reg_op!(cb_sra_c, sra, c);
    cb_reg_op!(cb_sra_d, sra, d);
    cb_reg_op!(cb_sra_e, sra, e);
    cb_reg_op!(cb_sra_h, sra, h);
    cb_reg_op!(cb_sra_l, sra, l);
    cb_hlp_op!(cb_sra_hlp, sra);
    cb_reg_op!(cb_sra_a, sra, a);
    // SWAP r / SWAP (HL)
    cb_reg_op!(cb_swap_b, swap, b);
    cb_reg_op!(cb_swap_c, swap, c);
    cb_reg_op!(cb_swap_d, swap, d);
    cb_reg_op!(cb_swap_e, swap, e);
    cb_reg_op!(cb_swap_h, swap, h);
    cb_reg_op!(cb_swap_l, swap, l);
    cb_hlp_op!(cb_swap_hlp, swap);
    cb_reg_op!(cb_swap_a, swap, a);
    // SRL r / SRL (HL)
    cb_reg_op!(cb_srl_b, srl, b);
    cb_reg_op!(cb_srl_c, srl, c);
    cb_reg_op!(cb_srl_d, srl, d);
    cb_reg_op!(cb_srl_e, srl, e);
    cb_reg_op!(cb_srl_h, srl, h);
    cb_reg_op!(cb_srl_l, srl, l);
    cb_hlp_op!(cb_srl_hlp, srl);
    cb_reg_op!(cb_srl_a, srl, a);
    // BIT b, r / BIT b, (HL)
    cb_reg_op!(cb_bit_0_b, bit, 0, b);
    cb_reg_op!(cb_bit_0_c, bit, 0, c);
    cb_reg_op!(cb_bit_0_d, bit, 0, d);
    cb_reg_op!(cb_bit_0_e, bit, 0, e);
    cb_reg_op!(cb_bit_0_h, bit, 0, h);
    cb_reg_op!(cb_bit_0_l, bit, 0, l);
    cb_hlp_op!(cb_bit_0_hlp, bit, 0);
    cb_reg_op!(cb_bit_0_a, bit, 0, a);
    cb_reg_op!(cb_bit_1_b, bit, 1, b);
    cb_reg_op!(cb_bit_1_c, bit, 1, c);
    cb_reg_op!(cb_bit_1_d, bit, 1, d);
    cb_reg_op!(cb_bit_1_e, bit, 1, e);
    cb_reg_op!(cb_bit_1_h, bit, 1, h);
    cb_reg_op!(cb_bit_1_l, bit, 1, l);
    cb_hlp_op!(cb_bit_1_hlp, bit, 1);
    cb_reg_op!(cb_bit_1_a, bit, 1, a);
    cb_reg_op!(cb_bit_2_b, bit, 2, b);
    cb_reg_op!(cb_bit_2_c, bit, 2, c);
    cb_reg_op!(cb_bit_2_d, bit, 2, d);
    cb_reg_op!(cb_bit_2_e, bit, 2, e);
    cb_reg_op!(cb_bit_2_h, bit, 2, h);
    cb_reg_op!(cb_bit_2_l, bit, 2, l);
    cb_hlp_op!(cb_bit_2_hlp, bit, 2);
    cb_reg_op!(cb_bit_2_a, bit, 2, a);
    cb_reg_op!(cb_bit_3_b, bit, 3, b);
    cb_reg_op!(cb_bit_3_c, bit, 3, c);
    cb_reg_op!(cb_bit_3_d, bit, 3, d);
    cb_reg_op!(cb_bit_3_e, bit, 3, e);
    cb_reg_op!(cb_bit_3_h, bit, 3, h);
    cb_reg_op!(cb_bit_3_l, bit, 3, l);
    cb_hlp_op!(cb_bit_3_hlp, bit, 3);
    cb_reg_op!(cb_bit_3_a, bit, 3, a);
    cb_reg_op!(cb_bit_4_b, bit, 4, b);
    cb_reg_op!(cb_bit_4_c, bit, 4, c);
    cb_reg_op!(cb_bit_4_d, bit, 4, d);
    cb_reg_op!(cb_bit_4_e, bit, 4, e);
    cb_reg_op!(cb_bit_4_h, bit, 4, h);
    cb_reg_op!(cb_bit_4_l, bit, 4, l);
    cb_hlp_op!(cb_bit_4_hlp, bit, 4);
    cb_reg_op!(cb_bit_4_a, bit, 4, a);
    cb_reg_op!(cb_bit_5_b, bit, 5, b);
    cb_reg_op!(cb_bit_5_c, bit, 5, c);
    cb_reg_op!(cb_bit_5_d, bit, 5, d);
    cb_reg_op!(cb_bit_5_e, bit, 5, e);
    cb_reg_op!(cb_bit_5_h, bit, 5, h);
    cb_reg_op!(cb_bit_5_l, bit, 5, l);
    cb_hlp_op!(cb_bit_5_hlp, bit, 5);
    cb_reg_op!(cb_bit_5_a, bit, 5, a);
    cb_reg_op!(cb_bit_6_b, bit, 6, b);
    cb_reg_op!(cb_bit_6_c, bit, 6, c);
    cb_reg_op!(cb_bit_6_d, bit, 6, d);
    cb_reg_op!(cb_bit_6_e, bit, 6, e);
    cb_reg_op!(cb_bit_6_h, bit, 6, h);
    cb_reg_op!(cb_bit_6_l, bit, 6, l);
    cb_hlp_op!(cb_bit_6_hlp, bit, 6);
    cb_reg_op!(cb_bit_6_a, bit, 6, a);
    cb_reg_op!(cb_bit_7_b, bit, 7, b);
    cb_reg_op!(cb_bit_7_c, bit, 7, c);
    cb_reg_op!(cb_bit_7_d, bit, 7, d);
    cb_reg_op!(cb_bit_7_e, bit, 7, e);
    cb_reg_op!(cb_bit_7_h, bit, 7, h);
    cb_reg_op!(cb_bit_7_l, bit, 7, l);
    cb_hlp_op!(cb_bit_7_hlp, bit, 7);
    cb_reg_op!(cb_bit_7_a, bit, 7, a);
    // RES b, r / RES b, (HL)
    cb_reg_op!(cb_res_0_b, res, 0, b);
    cb_reg_op!(cb_res_0_c, res, 0, c);
    cb_reg_op!(cb_res_0_d, res, 0, d);
    cb_reg_op!(cb_res_0_e, res, 0, e);
    cb_reg_op!(cb_res_0_h, res, 0, h);
    cb_reg_op!(cb_res_0_l, res, 0, l);
    cb_hlp_op!(cb_res_0_hlp, res, 0);
    cb_reg_op!(cb_res_0_a, res, 0, a);
    cb_reg_op!(cb_res_1_b, res, 1, b);
    cb_reg_op!(cb_res_1_c, res, 1, c);
    cb_reg_op!(cb_res_1_d, res, 1, d);
    cb_reg_op!(cb_res_1_e, res, 1, e);
    cb_reg_op!(cb_res_1_h, res, 1, h);
    cb_reg_op!(cb_res_1_l, res, 1, l);
    cb_hlp_op!(cb_res_1_hlp, res, 1);
    cb_reg_op!(cb_res_1_a, res, 1, a);
    cb_reg_op!(cb_res_2_b, res, 2, b);
    cb_reg_op!(cb_res_2_c, res, 2, c);
    cb_reg_op!(cb_res_2_d, res, 2, d);
    cb_reg_op!(cb_res_2_e, res, 2, e);
    cb_reg_op!(cb_res_2_h, res, 2, h);
    cb_reg_op!(cb_res_2_l, res, 2, l);
    cb_hlp_op!(cb_res_2_hlp, res, 2);
    cb_reg_op!(cb_res_2_a, res, 2, a);
    cb_reg_op!(cb_res_3_b, res, 3, b);
    cb_reg_op!(cb_res_3_c, res, 3, c);
    cb_reg_op!(cb_res_3_d, res, 3, d);
    cb_reg_op!(cb_res_3_e, res, 3, e);
    cb_reg_op!(cb_res_3_h, res, 3, h);
    cb_reg_op!(cb_res_3_l, res, 3, l);
    cb_hlp_op!(cb_res_3_hlp, res, 3);
    cb_reg_op!(cb_res_3_a, res, 3, a);
    cb_reg_op!(cb_res_4_b, res, 4, b);
    cb_reg_op!(cb_res_4_c, res, 4, c);
    cb_reg_op!(cb_res_4_d, res, 4, d);
    cb_reg_op!(cb_res_4_e, res, 4, e);
    cb_reg_op!(cb_res_4_h, res, 4, h);
    cb_reg_op!(cb_res_4_l, res, 4, l);
    cb_hlp_op!(cb_res_4_hlp, res, 4);
    cb_reg_op!(cb_res_4_a, res, 4, a);
    cb_reg_op!(cb_res_5_b, res, 5, b);
    cb_reg_op!(cb_res_5_c, res, 5, c);
    cb_reg_op!(cb_res_5_d, res, 5, d);
    cb_reg_op!(cb_res_5_e, res, 5, e);
    cb_reg_op!(cb_res_5_h, res, 5, h);
    cb_reg_op!(cb_res_5_l, res, 5, l);
    cb_hlp_op!(cb_res_5_hlp, res, 5);
    cb_reg_op!(cb_res_5_a, res, 5, a);
    cb_reg_op!(cb_res_6_b, res, 6, b);
    cb_reg_op!(cb_res_6_c, res, 6, c);
    cb_reg_op!(cb_res_6_d, res, 6, d);
    cb_reg_op!(cb_res_6_e, res, 6, e);
    cb_reg_op!(cb_res_6_h, res, 6, h);
    cb_reg_op!(cb_res_6_l, res, 6, l);
    cb_hlp_op!(cb_res_6_hlp, res, 6);
    cb_reg_op!(cb_res_6_a, res, 6, a);
    cb_reg_op!(cb_res_7_b, res, 7, b);
    cb_reg_op!(cb_res_7_c, res, 7, c);
    cb_reg_op!(cb_res_7_d, res, 7, d);
    cb_reg_op!(cb_res_7_e, res, 7, e);
    cb_reg_op!(cb_res_7_h, res, 7, h);
    cb_reg_op!(cb_res_7_l, res, 7, l);
    cb_hlp_op!(cb_res_7_hlp, res, 7);
    cb_reg_op!(cb_res_7_a, res, 7, a);
    // SET b, r / SET b, (HL)
    cb_reg_op!(cb_set_0_b, set, 0, b);
    cb_reg_op!(cb_set_0_c, set, 0, c);
    cb_reg_op!(cb_set_0_d, set, 0, d);
    cb_reg_op!(cb_set_0_e, set, 0, e);
    cb_reg_op!(cb_set_0_h, set, 0, h);
    cb_reg_op!(cb_set_0_l, set, 0, l);
    cb_hlp_op!(cb_set_0_hlp, set, 0);
    cb_reg_op!(cb_set_0_a, set, 0, a);
    cb_reg_op!(cb_set_1_b, set, 1, b);
    cb_reg_op!(cb_set_1_c, set, 1, c);
    cb_reg_op!(cb_set_1_d, set, 1, d);
    cb_reg_op!(cb_set_1_e, set, 1, e);
    cb_reg_op!(cb_set_1_h, set, 1, h);
    cb_reg_op!(cb_set_1_l, set, 1, l);
    cb_hlp_op!(cb_set_1_hlp, set, 1);
    cb_reg_op!(cb_set_1_a, set, 1, a);
    cb_reg_op!(cb_set_2_b, set, 2, b);
    cb_reg_op!(cb_set_2_c, set, 2, c);
    cb_reg_op!(cb_set_2_d, set, 2, d);
    cb_reg_op!(cb_set_2_e, set, 2, e);
    cb_reg_op!(cb_set_2_h, set, 2, h);
    cb_reg_op!(cb_set_2_l, set, 2, l);
    cb_hlp_op!(cb_set_2_hlp, set, 2);
    cb_reg_op!(cb_set_2_a, set, 2, a);
    cb_reg_op!(cb_set_3_b, set, 3, b);
    cb_reg_op!(cb_set_3_c, set, 3, c);
    cb_reg_op!(cb_set_3_d, set, 3, d);
    cb_reg_op!(cb_set_3_e, set, 3, e);
    cb_reg_op!(cb_set_3_h, set, 3, h);
    cb_reg_op!(cb_set_3_l, set, 3, l);
    cb_hlp_op!(cb_set_3_hlp, set, 3);
    cb_reg_op!(cb_set_3_a, set, 3, a);
    cb_reg_op!(cb_set_4_b, set, 4, b);
    cb_reg_op!(cb_set_4_c, set, 4, c);
    cb_reg_op!(cb_set_4_d, set, 4, d);
    cb_reg_op!(cb_set_4_e, set, 4, e);
    cb_reg_op!(cb_set_4_h, set, 4, h);
    cb_reg_op!(cb_set_4_l, set, 4, l);
    cb_hlp_op!(cb_set_4_hlp, set, 4);
    cb_reg_op!(cb_set_4_a, set, 4, a);
    cb_reg_op!(cb_set_5_b, set, 5, b);
    cb_reg_op!(cb_set_5_c, set, 5, c);
    cb_reg_op!(cb_set_5_d, set, 5, d);
    cb_reg_op!(cb_set_5_e, set, 5, e);
    cb_reg_op!(cb_set_5_h, set, 5, h);
    cb_reg_op!(cb_set_5_l, set, 5, l);
    cb_hlp_op!(cb_set_5_hlp, set, 5);
    cb_reg_op!(cb_set_5_a, set, 5, a);
    cb_reg_op!(cb_set_6_b, set, 6, b);
    cb_reg_op!(cb_set_6_c, set, 6, c);
    cb_reg_op!(cb_set_6_d, set, 6, d);
    cb_reg_op!(cb_set_6_e, set, 6, e);
    cb_reg_op!(cb_set_6_h, set, 6, h);
    cb_reg_op!(cb_set_6_l, set, 6, l);
    cb_hlp_op!(cb_set_6_hlp, set, 6);
    cb_reg_op!(cb_set_6_a, set, 6, a);
    cb_reg_op!(cb_set_7_b, set, 7, b);
    cb_reg_op!(cb_set_7_c, set, 7, c);
    cb_reg_op!(cb_set_7_d, set, 7, d);
    cb_reg_op!(cb_set_7_e, set, 7, e);
    cb_reg_op!(cb_set_7_h, set, 7, h);
    cb_reg_op!(cb_set_7_l, set, 7, l);
    cb_hlp_op!(cb_set_7_hlp, set, 7);
    cb_reg_op!(cb_set_7_a, set, 7, a);
}